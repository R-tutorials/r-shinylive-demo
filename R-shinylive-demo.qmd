---
title: "R-shinylive app in Quarto!"
format:
  html:
    grid: 
      body-width: 1500px
filters:
  - shinylive
---

Interested in deploying a Shiny application for R within Quarto? This repository is for you!

For the demo, we're showing the source code used in Joe Cheng's [posit::conf(2023) demo](https://jcheng5.github.io/posit-conf-2023-shinylive/#/option-3-include-1) (Warning: Large file size, don't open on mobile! ([Source Code](https://github.com/jcheng5/posit-conf-2023-shinylive/blob/d385ad18eb0d867f25cc4721d9e8c25aeb2dfb90/slides.qmd#L299))

## Sample Application 

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
library(shiny)
library(bslib)

# Define UI for app that draws a histogram ----
ui <- page_sidebar(
  sidebar = sidebar(open = "open",
    numericInput("n", "Sample count", 100),
    checkboxInput("pause", "Pause", FALSE),
  ),
  plotOutput("plot", width=1100)
)

server <- function(input, output, session) {
  data <- reactive({
    input$resample
    if (!isTRUE(input$pause)) {
      invalidateLater(1000)
    }
    rnorm(input$n)
  })
  
  output$plot <- renderPlot({
    hist(data(),
      breaks = 40,
      xlim = c(-2, 2),
      ylim = c(0, 1),
      lty = "blank",
      xlab = "value",
      freq = FALSE,
      main = ""
    )
    
    x <- seq(from = -2, to = 2, length.out = 500)
    y <- dnorm(x)
    lines(x, y, lwd=1.5)
    
    lwd <- 5
    abline(v=0, col="red", lwd=lwd, lty=2)
    abline(v=mean(data()), col="blue", lwd=lwd, lty=1)

    legend(legend = c("Normal", "Mean", "Sample mean"),
      col = c("black", "red", "blue"),
      lty = c(1, 2, 1),
      lwd = c(1, lwd, lwd),
      x = 1,
      y = 0.9
    )
  }, res=140)
}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```

## Behind the Site

Interested in exploring your own App? 

The first step is to install the `r-shinylive` R package. It's currently on GitHub and can be obtained using in _R_ console:

```r
# install.packages("pak")
pak::pak("posit-dev/r-shinylive")
```

From here, we need to create a Quarto project by typing into Terminal:

```sh
quarto create project default
```

![Screenshot showing the `Terminal` tab of RStudio with the command to create a Quarto project.](images/create-quarto-r-shiny-live-project.png)

Inside the project creation step, you will be asked to supply a directory name. This directory name will also double as the Quarto document filename.

Note, if you skip this step, there will not be a `_quarto.yml` file and, thus, when you try to render the document below, you'll get the error of: 

```md
ERROR: The shinylive extension must be used in a Quarto project directory (with a _quarto.yml file).
```


Next, we need to install the Quarto extension for `shinylive` by typing into the **Terminal** tab.

```sh
quarto add quarto-ext/shinylive
```

![Screenshot showing the `Terminal` tab of RStudio with the Quarto Extension installation command.](images/install-shinylive-in-terminal.png)


With that, we're now able to progress onto including a Shiny app directly into our Quarto file. Part of this process requires adding to the top of the desired Quarto file (`.qmd`) a filter key for `shinylive`:

```yml
filters:
  - shinylive
```

With that being done, please place the application inside of the desired Quarto file (`.qmd`) using:

````r
---
title: "Our first r-shinylive Quarto document!"
filters:
  - shinylive
---

```{shinylive-r}
#| standalone: true

ui <- ...

server <- function(input, output, session) {
  ...
}

shinyApp(ui, server)
```
````

Once content with the Shiny app, the next step is to Render the document by pressing the Render button.

![Press the render button in RStudio](images/rstudio-render-button.png)


During the render process, the output directory should add one folder `<QmdFileName>_files` and `shinylive-sw.js`. 

The final folder configuration looks like:

```sh
.
├── _extensions
│   └── quarto-ext/shinylive # By quarto add
├── _quarto.yml              # By quarto create
├── R-shinylive-demo.html
├── R-shinylive-demo.qmd
├── R-shinylive-demo_files
│   └── libs
└──  shinylive-sw.js
```


## References:

- [Shinylive R Package](https://github.com/posit-dev/r-shinylive)
- [Shinylive Quarto extension](https://github.com/quarto-ext/shinylive): Static Shiny apps as Quarto code chunks

